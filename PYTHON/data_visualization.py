# -*- coding: utf-8 -*-
"""data_visualization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_5eFrVTP4Qu0TuDJxnf1Zw6Jx93z0Jkw
"""

import pandas as pd

df = pd.read_csv('/route_detail.csv')

df.head()

"""# Data cleaning"""

# removing unwanted columns
df = df.iloc[:,1:]
df.head()

"""# Top 10 Stop which have high bus traffic"""

stat = df.groupby(by=["stop_name"])["route_id"].count().sort_values(ascending=False)
stat.iloc[:10]

"""# Visualize data

* Found network graph will best suit for the usecase
"""

import matplotlib.pyplot as plt
import networkx as nx

"""**Visualizing Buses passing through a stop**"""

sample = df[df["stop_name"]=="DUNLOP"]
G = nx.from_pandas_edgelist(sample, "route_id", "stop_name")
nx.draw_networkx(G)
plt.show()

"""# Data manipulation to calculate next stop"""

df.head()
df["next_stop"] = df.groupby(by=["route_id"])["stop_name"].shift(-1)
df.loc[:50]

"""* Assigning next stop for last stop as route_id (Bus number) for easy visualization later"""

df.loc[df["next_stop"].isna(), "next_stop"] = df.loc[df["next_stop"].isna(), "route_id"]
df.loc[:50]

"""# Sample data creation - Dunlop stop"""

sample_routes = df[df["stop_name"]=="DUNLOP"]["route_id"]
sample = df[df["route_id"].isin(sample_routes)]
sample.head()

"""* **Except for base stop all other stop should be unique to route, So bus route can be visualized clearly without intersection between stops**"""

# sample["derived_next_stop"] = sample.apply(lambda row: row["next_stop"] if(row["next_stop"]=="DUNLOP") else row["route_id"]+row["next_stop"], axis=1)
# sample = sample.drop("derived_next_stop",axis=1)
sample.loc[~(sample["next_stop"]=="DUNLOP") & ~(sample["next_stop"]==sample["route_id"]),"derived_next_stop"] =  sample["route_id"]+ "-" +sample["next_stop"]
sample.loc[(sample["next_stop"]=="DUNLOP") | (sample["next_stop"]==sample["route_id"]),"derived_next_stop"] = sample["next_stop"]
sample.loc[~(sample["stop_name"]=="DUNLOP"),"derived_stop_name"] = sample["route_id"]+ "-" + sample["stop_name"]
sample.loc[sample["stop_name"]=="DUNLOP","derived_stop_name"] = sample["stop_name"]
sample.head()

"""# Creating Graph"""

G = nx.from_pandas_edgelist(sample, "derived_stop_name", "derived_next_stop", create_using=nx.DiGraph())
print(nx.is_directed(G))

"""
# coloring based on bus number"""

!pip install distinctipy

from distinctipy import distinctipy

routes = sample["route_id"].unique()
n=len(list(routes))
# print(list(route))

reserved_color = [(1,0,0),(0,1,0),(0,0,1),(0.8,0.6,0.3)]

# generate N visually distinct colours
colors = distinctipy.get_colors(n,reserved_color)
# print(colors)
route_color_map = { route: color for route, color in zip(routes,colors)}
# print(route_color_map)

"""# color edges based on route"""

edge_color = []
for u,v in G.edges():
    route_id = None
    u_list = u.split("-")
    v_list = v.split("-")
    if len(u_list) > 1:
        route_id = u_list[0]
    elif len(v_list) > 1:
        route_id = v_list[0]

    edge_color.append(route_color_map[route_id])
# print(edge_color)

"""# Color node based on stops"""

stops = sample["stop_name"].unique()
n=len(list(stops))

print(n)

reserved_color = [(1,0,0),(0,1,0),(0,0,1)] + edge_color

# generate N visually distinct colours
colors = distinctipy.get_colors(n,reserved_color)
# print(colors)
stop_color_map = { stop: color for stop, color in zip(stops,colors)}
# print(stop_color_map)

node_color =[]
root_node = None
labels = {}
for node in G:
    if node == "DUNLOP":
        # current stop
        root_node = node
        node_color.append((0,1,0)) #green
        labels[node] = node
    elif node in list(sample["route_id"]):
        node_color.append((1,0,0)) #red
        labels[node] = node
    else:
        labels[node] = sample.loc[sample["derived_stop_name"]== node,"stop_id"].values[0]
        node_color.append(stop_color_map[node.split("-")[1]]) #route wise color
# print(root_node)
# print(labels)

"""* use graphviz radical layout
* add these details in legend
* increse edge width

# Creating Legend for the graph
"""

from matplotlib.lines import Line2D

legend_elements = [
    Line2D([0], [0], marker='o', color='w', label='Current Stop (DUNLOP)',markerfacecolor='g', markersize=15),
    Line2D([0], [0], marker='o', color='w', label='Bus number',markerfacecolor='r', markersize=15),
]
route_legend = [
    Line2D([0], [0], marker='d', color='w', label= bus_num,markerfacecolor=route_color_map[bus_num], markersize=15) for bus_num in route_color_map
]
stop_legend = [
    Line2D([0], [0], marker='o', color='w', label= stop,markerfacecolor=stop_color_map[stop], markersize=15) for stop in stop_color_map
]
legend_elements = legend_elements + route_legend + stop_legend

"""# Drawing Graph"""

plt.figure(figsize=(100,100))
pos=nx.nx_pydot.graphviz_layout(G,prog="twopi",root=root_node)
nx.draw_networkx(G, pos=pos,edge_color=edge_color, node_color=node_color, arrows=True,
    arrowsize= 25, width=5, labels=labels)
plt.legend(handles=legend_elements, loc='upper right')
plt.savefig('routewise_map_from_dunlop.png')

"""# Future Enhancement
Instead of having stops unique to route, multi route (edge) should pass through same stop (node).

Need to explore ways to makes edges curve without interacting with each other

More visually appealing and informative graph can be created
"""